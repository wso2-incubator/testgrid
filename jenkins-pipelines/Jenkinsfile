pipeline {

    agent any
    environment {
        TESTGRID_VERSION = '0.9.0-SNAPSHOT'
        TESTGRID_NAME = 'WSO2-TestGrid'
        TESTGRID_DIST_URL = 'https://wso2.org/jenkins/job/platform-builds/job/wso2-test-grid/' +
                'lastSuccessfulBuild/artifact/distribution/target/${TESTGRID_NAME}-${TESTGRID_VERSION}.zip'

        PRODUCT="wso2is"
        VERSION="5.3.0"
        CHANNEL="public"

        INFRASTRUCTURE_REPOSITORY='https://github.com/harshanL/cloudformation-is'
        DEPLOYMENT_REPOSITORY='https://github.com/harshanL/cloudformation-is'
        SCENARIOS_REPOSITORY='https://github.com/sameerawickramasekara/identity-test-integration.git'

        INFRA_LOCATION="aws-cloudformation-templates"
        DEPLOYMENT_LOCATION="aws-cloudformation-templates"
        SCENARIOS_LOCATION="identity-test-integration"
        INFRA_CONFIGS_LOCATION="${INFRA_LOCATION}/infrastructure-build-plans"
        // https://github.com/wso2/cloudformation-is
        AWS_ACCESS_KEY_ID='AKIAIBUOWHUNZ2KYJ4YA'
        AWS_SECRET_ACCESS_KEY='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'
        WUM_USERNAME='testgridwum@wso2.com'
        WUM_PASSWORD='ZmJkOTlmZDZiMGYxYzdjYjhlZDEyMzQ3'
        PWD=pwd()
        TESTGRID_HOME='/testgrid/jenkins-home/workspace/wso2is-5.4.0/testgrid-home'
    }

    tools {
        jdk 'jdk8'
    }

    stages {
        stage('Preparation') {
            steps {
               deleteDir()
                // git url: "${INFRASTRUCTURE_REPOSITORY}"
                //git ${DEPLOYMENT_REPOSITORY}  //ATM Infra and Deploy code in one repository.

                // sh "echo $TESTGRID_HOME"

                sh "echo 'webAppUrlFile	http://localhost:8181/api' > anchorChain.tsv"

                sh "mkdir ${SCENARIOS_LOCATION}"
                dir("${SCENARIOS_LOCATION}"){
                    git url: "${SCENARIOS_REPOSITORY}"
                }

                sh "mkdir ${INFRA_LOCATION}"
                dir("${INFRA_LOCATION}"){
                    git url:"${INFRASTRUCTURE_REPOSITORY}"
                }

                // sh 'mkdir testplans/'

                sh """
                echo ${TESTGRID_NAME}
                curl ${TESTGRID_DIST_URL} -o ${TESTGRID_NAME}.zip
                unzip ${TESTGRID_NAME}.zip
                cd ${TESTGRID_NAME}-${TESTGRID_VERSION}
                """

                sh """
                cd ${TESTGRID_NAME}-${TESTGRID_VERSION}
                java -jar test-grid-${TESTGRID_VERSION}.jar create-product-testplan \
                    --product ${PRODUCT} --version ${VERSION} --channel ${CHANNEL} -ics ${INFRA_CONFIGS_LOCATION} \
                    -i ${INFRA_CONFIGS_LOCATION}/ubuntu-mysql5.6-jdk7-is-single-node.yaml \
                    -ir ${PWD}/${INFRA_LOCATION}/scripts
                """
            }
        }
        stage('TestPlan-01-Ubuntu-JDK7-MySQL_5.7') {
            steps {
                script {
                    try {
                        echo 'Running Test Plan 01'
                        sh "java -version"

                        sh """
                        cd ${TESTGRID_NAME}-${TESTGRID_VERSION}
                        java -jar test-grid-${TESTGRID_VERSION}.jar run-testplan \
                            --product ${PRODUCT} --version ${VERSION} --channel ${CHANNEL} \
                            -ir ${PWD}/${INFRA_LOCATION}/scripts \
                            -sr ${PWD}/${SCENARIOS_LOCATION} \
                            -i ${PWD}/${INFRA_CONFIGS_LOCATION}/ubuntu-mysql5.6-jdk7-is-single-node.yaml \
                            -t ${PWD}/${SCENARIOS_LOCATION}/TestPlans/single-node-testplan.yaml
                        """
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception err) {
                        currentBuild.result = 'SUCCESS'
                    }
                }
                echo "RESULT: ${currentBuild.result}"
            }
        }
        stage('TestPlan-01-Ubuntu-JDK8-MySQL_5.6') {
            steps {
                script {
                    try {
                        echo 'Running Test Plan 01'
                        sh "java -version"

                        sh """
                        cd ${TESTGRID_NAME}-${TESTGRID_VERSION}
                        java -jar test-grid-${TESTGRID_VERSION}.jar run-testplan \
                            --product ${PRODUCT} --version ${VERSION} --channel ${CHANNEL} \
                            -ir ${PWD}/${INFRA_LOCATION}/scripts \
                            -sr ${PWD}/${SCENARIOS_LOCATION} \
                            -i ${PWD}/${INFRA_CONFIGS_LOCATION}/ubuntu-mysql5.6-jdk8-is-single-node.yaml \
                            -t ${PWD}/${SCENARIOS_LOCATION}/TestPlans/single-node-testplan.yaml
                        """
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception err) {
                        currentBuild.result = 'SUCCESS'
                    }
                }
                echo "RESULT: ${currentBuild.result}"
            }
        }
        stage('TestPlan-01-Ubuntu-JDK8-PostgreSQL_9.5') {
            steps {
                script {
                    try {
                        echo 'Running TestPlan-01 on Ubuntu-JDK8-PostgreSQL_9.5'
                        sh "java -version"

                        sh """
                        cd ${TESTGRID_NAME}-${TESTGRID_VERSION}
                        java -jar test-grid-${TESTGRID_VERSION}.jar run-testplan \
                            --product ${PRODUCT} --version ${VERSION} --channel ${CHANNEL} \
                            -ir ${PWD}/${INFRA_LOCATION}/scripts \
                            -sr ${PWD}/${SCENARIOS_LOCATION} \
                            -i ${PWD}/${INFRA_CONFIGS_LOCATION}/ubuntu-postgre9.5-jdk8-is-single-node.yaml \
                            -t ${PWD}/${SCENARIOS_LOCATION}/TestPlans/single-node-testplan.yaml
                        """
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception err) {
                        currentBuild.result = 'SUCCESS'
                    }
                }
                echo "RESULT: ${currentBuild.result}"
            }
        }
        stage('TestPlan-01-Ubuntu-JDK7-PostgreSQL_9.5') {
            steps {
                script {
                    try {
                        echo 'Running TestPlan-01 on Ubuntu-JDK7-PostgreSQL_9.5'
                        sh "java -version"

                        sh """
                        cd ${TESTGRID_NAME}-${TESTGRID_VERSION}
                        java -jar test-grid-${TESTGRID_VERSION}.jar run-testplan \
                            --product ${PRODUCT} --version ${VERSION} --channel ${CHANNEL} \
                            -ir ${PWD}/${INFRA_LOCATION}/scripts \
                            -sr ${PWD}/${SCENARIOS_LOCATION} \
                            -i ${PWD}/${INFRA_CONFIGS_LOCATION}/ubuntu-postgre9.5-jdk7-is-single-node.yaml \
                            -t ${PWD}/${SCENARIOS_LOCATION}/TestPlans/single-node-testplan.yaml
                        """
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception err) {
                        currentBuild.result = 'SUCCESS'
                    }
                }
                echo "RESULT: ${currentBuild.result}"
            }
        }
    }
    post {
        always {
           sh """
            cd ${TESTGRID_NAME}-${TESTGRID_VERSION}
            java -jar test-grid-${TESTGRID_VERSION}.jar generate-report \
            --product ${PRODUCT} --version ${VERSION} --channel ${CHANNEL} \
            """
           publishHTML([
           allowMissing: false,
           alwaysLinkToLastBuild: true,
           keepAll: true,
           reportDir: "${TESTGRID_HOME}",
           reportFiles: '*.html',
           reportName: 'HTML Report',
           reportTitles: ''])
       }
   }
}