pipeline {
    agent any
    environment {
        TESTGRID_NAME = 'WSO2-TestGrid'
        TESTGRID_DIST_LOCATION = '/testgrid/jenkins-home/workspace/'
        TESTGRID_HOME='/testgrid/testgrid-home/'

        PRODUCT="wso2is-5.4.1-LTS"

        INFRASTRUCTURE_REPOSITORY='https://github.com/azinneera/cloudformation-is'
        DEPLOYMENT_REPOSITORY='https://github.com/harshanL/cloudformation-is'
        SCENARIOS_REPOSITORY='https://github.com/wso2-incubator/identity-test-integration.git'

        INFRA_LOCATION="aws-cloudformation-templates"
        DEPLOYMENT_LOCATION="aws-cloudformation-templates"
        SCENARIOS_LOCATION="identity-test-integration"
        INFRA_CONFIGS_LOCATION="${INFRA_LOCATION}/infrastructure-build-plans"

        AWS_ACCESS_KEY_ID=credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY=credentials('AWS_SECRET_ACCESS_KEY')
        PWD=pwd()
        JOB_CONFIG_YAML = "job-config.yaml"
        JOB_CONFIG_YAML_PATH = "${PWD}/${JOB_CONFIG_YAML}"

        // Jmeter dependencies
        SELENIUM_JAR='https://search.maven.org/remotecontent?filepath=org/seleniumhq/selenium/selenium-java/3.8.1/selenium-java-3.8.1.jar'
        HTML_UNIT_DRIVER='https://search.maven.org/remotecontent?filepath=org/seleniumhq/selenium/htmlunit-driver/2.29.0/htmlunit-driver-2.29.0-jar-with-dependencies.jar'
    }

    tools {
        jdk 'jdk8'
    }

    stages {
        stage('Preparation') {
            steps {

                echo pwd()
                deleteDir()

                // Clone scenario repo
                sh "mkdir ${SCENARIOS_LOCATION}"
                dir("${SCENARIOS_LOCATION}"){
                    git url: "${SCENARIOS_REPOSITORY}"
                }

                // Clone infra repo
                sh "mkdir ${INFRA_LOCATION}"
                dir("${INFRA_LOCATION}"){
                    git url:"${INFRASTRUCTURE_REPOSITORY}"
                }

                sh """
                echo ${TESTGRID_NAME}
                cd ${TESTGRID_NAME}
                curl -o ./lib/selenium-java.jar $SELENIUM_JAR
                curl -o ./lib/html-unit-driver.jar $HTML_UNIT_DRIVER
                """

                sh """
                echo 'infrastructureRepository: ${INFRA_LOCATION}/cloudformation-templates/pattern-1/' > ${JOB_CONFIG_YAML_PATH}
                echo 'deploymentRepository: ${INFRA_LOCATION}/cloudformation-templates/pattern-1/' >> ${JOB_CONFIG_YAML_PATH}
                echo 'scenarioTestsRepository: ${SCENARIOS_LOCATION}' >> ${JOB_CONFIG_YAML_PATH}
                echo 'testgridYamlLocation: ${INFRA_CONFIGS_LOCATION}/single-node-infra.yaml' >> ${JOB_CONFIG_YAML_PATH}

                echo The job-config.yaml:
                cat ${JOB_CONFIG_YAML_PATH}
                """

                stash name: "${JOB_CONFIG_YAML}", includes : "${JOB_CONFIG_YAML}"

                sh """
                cd ${TESTGRID_NAME}
                ./testgrid generate-test-plan \
                    --product ${PRODUCT} \
                    --file ${JOB_CONFIG_YAML_PATH}
                """
            }
        }

        stage('TestPlan-01-Infra-1') {
            steps {
                script {
                    try {
                        echo 'Running Test Plan 01'
                        sh "java -version"

                        unstash name: "${JOB_CONFIG_YAML}"

                        sh """
                        cd ${TESTGRID_NAME}
                        ./testgrid run-testplan \
                            --product ${PRODUCT} \
                            --file "${PWD}/test-plans/test-plan-01.yaml"
                        """
                    } catch (Exception err) {
                        echo "Error : ${err}"
                        currentBuild.result = 'FAILURE'
                    }
                }
                echo "RESULT: ${currentBuild.result}"
            }
        }
    }

    post {
        always {
           sh """
            cd ${TESTGRID_NAME}
            ./testgrid generate-report \
            --product ${PRODUCT} \
            --groupBy scenario
            """

            // Archive artifacts
            withAWS(credentials:'TESTGRID_BOT_CREDENTIALS') {
              // Upload artifacts to S3
              s3Upload(workingDir:"${TESTGRID_HOME}", includePathPattern:"**/*.log, **/*.html", bucket:"jenkins-testrun-artifacts", path:"artifacts/")
            }

            // Delete logs and reports after upload
            dir("${TESTGRID_HOME}/${PRODUCT}") {
                deleteDir()
            }
       }
  }
}
